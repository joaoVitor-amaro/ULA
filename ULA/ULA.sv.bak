module ULA (
    input [5:0] A,           
    input [5:0] B,          
    input reset,             
    input modo,              
    input [2:0] op_sel,      // operacao
    output reg [5:0] saida,      // resultado da operacao
    output reg carry_out,    
    output reg zero          
);

	 logic carry_temporario;
    logic [5:0] resultado; 

   
    always_comb begin
		if (reset) begin
         resultado = 6'b000000;
         carry_temporario = 1'b0;
      end else begin
          case (modo)
              1'b0: begin // modo logico
                    case (op_sel)
                        3'b000: resultado = A & B;  // AND
                        3'b001: resultado = A | B;  // OR
                        3'b010: resultado = A ^ B;  // XOR
                        3'b011: resultado = ~A;     // NOT A
                        default: resultado = 6'b000000;
                    endcase
                    carry_temporario = 1'b0; // sem carry nas operacoes logicas
                end

                1'b1: begin // modo aritmetico
                    case (op_sel)
                        3'b000: begin 
                            {carry_temporario, resultado} = A + B;
                        end
                        3'b001: begin
                            {carry_temporario, resultado} = A - B;
                        end
                        3'b010: begin 
                            {carry_temporario, resultado} = A + 1;
                        end
                        3'b011: begin 
                            {carry_temporario, resultado} = A - 1;
                        end
                        default: begin
                            resultado = 6'b000000; 
                            carry_temporario = 1'b0;
                        end
                    endcase
                end
            endcase
        end
    end
	 
    assign saida = resultado;
    assign carry_out = carry_temporario;
    assign zero = (resultado == 6'b000000) ? 1'b1 : 1'b0; // sinal zero

endmodule